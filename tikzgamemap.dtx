% \iffalse meta-comment
%<*internal|tgm1>
\def\Version{2019/02/19 v0.1}
%</internal|tgm1>
%<*internal>
\iffalse
%</internal>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
---------------------------------------------------------------------------
tikzgamemap --- Maps for interactive fiction with TikZ

 Author: Alex Ball
 E-mail: ab318@bath.ac.uk
License: Released under the LaTeX Project Public License v1.3c or later
    See: http://www.latex-project.org/lppl.txt
---------------------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2019 by Alex Ball <ab318@bath.ac.uk>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Alex Ball.

\endpostamble

\usedir{tex/latex/\jobname}
\generate{
  \file{tgm1.sty}{\from{\jobname.dtx}{tgm1}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/\jobname}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{tikzgamemap.dtx}
%</driver>
%<tgm1>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<tgm1>\ProvidesPackage{tgm1}
%<*tgm1>
    [\Version\space Maps for interactive fiction with TikZ]
%</tgm1>
%<*driver>
\documentclass[12pt]{article}
% Page Layout
\usepackage[a4paper,hmargin=30mm,vmargin=25mm,nohead]{geometry}
% Typography
% \usepackage[charter,expert]{mathdesign}
% \makeatletter
% \def\hrulefill{\leavevmode\leaders \hrule height \rulethickness \hfill\kern\z@}
% \makeatother
\usepackage{iftex}
\ifPDFTeX
  \usepackage[utf8]{inputenc}
  \usepackage[T1]{fontenc}
  \usepackage[scaled=0.95,tabular]{sourceserifpro}
  \usepackage[scaled=0.95,tabular]{sourcesanspro}
  \usepackage[varl,varqu]{zi4}
\else
  \usepackage[no-math]{fontspec}
  \setmainfont
    [Scale=MatchLowercase
    ,Ligatures=TeX
    ]%
    {Source Serif Pro}
  \setsansfont
    [Scale=MatchLowercase
    ,Ligatures=TeX
    ,StylisticSet=4
    ,BoldFont={Source Sans Pro Bold}
    ,ItalicFont={Source Sans Pro Italic}
    ,BoldItalicFont={Source Sans Pro Bold Italic}
    ]%
    {Source Sans Pro}
  \setmonofont
    [Scale=MatchLowercase
    ,RawFeature={extend=0.83}
    ,BoldFont={Source Code Pro Bold}
    ,BoldItalicFont={Source Code Pro Bold}
    ,AutoFakeSlant=0.2
    ,ItalicFeatures={StylisticSet=2,StylisticSet=3}
    ,BoldItalicFeatures={FakeSlant=0.2,StylisticSet=2,StylisticSet=3}
    ]%
    {Source Code Pro}
\fi
\usepackage[italic]{mathastext}
% Improving the look of the documentation
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt plus 2pt minus 1pt}
\usepackage{multicol}
\usepackage{enumitem}
\setlist[itemize,enumerate]{%
  topsep={0pt plus 0.05em},%
  partopsep={0pt plus 0.05em},%
  itemsep={6pt plus 0.05em minus 0.05em},%
  parsep={0pt plus 0.05em},%
}
\usepackage[bookmarks,raiselinks,pageanchor,hyperindex,colorlinks]{hyperref}
\usepackage{etoolbox}
\usepackage{xstring}
\usepackage{tcolorbox,doc}
\makeatletter
\renewenvironment{theglossary}{%
  \bgroup
    \glossary@prologue
    \GlossaryParms \let\item\@idxitem \ignorespaces
}{%
  \egroup
}
\makeatother
\tcbuselibrary{documentation,breakable,minted}
\colorlet{Option}{violet}
\colorlet{Command}{red!75!black}
\colorlet{Environment}{blue!75!black}
\colorlet{Value}{olive!75!black}
\colorlet{Color}{cyan!75!black}
\tcbset
  { listing engine=minted
  , minted options=
    { breaklines
    , fontsize=\footnotesize
    , linenos
    , numbersep=20pt
    , firstnumber=last
    }
  , index format=pgf
  , color command=Command
  , color environment=Environment
  , color key=Option
  , color value=Value
  , color color=Color
  , colbacktitle=ExampleFrame!33!ExampleBack
  , docexample/.append style = {parskip}
  }
\renewcommand{\theFancyVerbLine}{\footnotesize\itshape\color{gray}\arabic{FancyVerbLine}}
\let\tcbcs=\cs
\renewcommand*{\cs}[1]{\textcolor{Command}{\tcbcs{#1}}}
\def\sqbrackets#1{%
  \texttt{\textcolor{Option}{[}#1\textcolor{Option}{]}}}
\def\brackets#1{%
  \texttt{\textcolor{Environment}{\char`\{}#1\textcolor{Environment}{\char`\}}}}
\def\marg#1{%
  \textcolor{Environment}{\ttfamily\char`\{}\meta{#1}\textcolor{Environment}{\ttfamily\char`\}}}
\newcommand*{\env}[1]{\textcolor{Environment}{\ttfamily #1}}
\newcommand*{\key}[1]{\textcolor{Option}{\ttfamily #1}}
\newcommand*{\val}[1]{\textcolor{Value}{\ttfamily #1}}
\makeatletter
\renewenvironment{macro}[1]{%
  \StrSubstitute{#1}{\detokenize{@}}{"@}[\MyName]%
  \edef\saved@macroname{\expandafter\string\csname #1\endcsname}%
  \let\saved@indexname\saved@macroname
  \index{\MyName @\tcbIndexPrintComC {\MyName}|(emph}%
}{%
  \ifdef{\MyName}{}{%
    \errmessage{You have closed a macro environment you have not opened on \the\inputlineno.}%
  }
  \index{\MyName @\tcbIndexPrintComC {\MyName}|)}%
}
\renewenvironment{environment}[1]{%
  \StrSubstitute{#1}{\detokenize{@}}{"@}[\MyName]%
  \edef\saved@macroname{#1}%
  \let\saved@indexname\saved@macroname
  \index{\MyName @\tcbIndexPrintEnvCA {\MyName}|(emph}%
  \index{Environments!\MyName @\tcbIndexPrintEnvC {\MyName}|(emph}%
}{%
  \ifdef{\MyName}{}{%
    \errmessage{You have closed an environment environment you have not opened on \the\inputlineno.}%
  }
  \index{Environments!\MyName @\tcbIndexPrintEnvC {\MyName}|)}%
  \index{\MyName @\tcbIndexPrintEnvCA {\MyName}|)}%
}
\makeatother
\newenvironment{optionkey}[1]{%
  \def\MyName{#1}%
  \index{\MyName@\tcbIndexPrintKeyCA {\MyName}|(emph}%
  \index{Keys!\MyName@\tcbIndexPrintKeyC {\MyName}|(emph}%
}{%
  \ifdef{\MyName}{}{%
    \errmessage{You have closed an optionkey environment you have not opened on \the\inputlineno.}%
  }
  \index{Keys!\MyName@\tcbIndexPrintKeyC {\MyName}|)}%
  \index{\MyName@\tcbIndexPrintKeyCA {\MyName}|)}%
}
\newenvironment{optionvalue}[1]{%
  \def\MyName{#1}%
  \index{\MyName@\tcbIndexPrintValCA {\MyName}|(emph}%
  \index{Values!\MyName@\tcbIndexPrintValC {\MyName}|(emph}%
}{%
  \ifdef{\MyName}{}{%
    \errmessage{You have closed an optionvalue environment you have not opened on \the\inputlineno.}%
  }
  \index{Values!\MyName@\tcbIndexPrintValC {\MyName}|)}%
  \index{\MyName@\tcbIndexPrintValCA {\MyName}|)}%
}
\makeatletter
\newcommand{\resetmintedformat}{%
  % Comments
  \expandafter\def\csname PYGdefault@tok@c\endcsname{\let\PYGdefault@it=\textit\def\PYGdefault@tc####1{\textcolor{gray}{####1}}}
  % Command sequences
  \expandafter\def\csname PYGdefault@tok@k\endcsname{\def\PYGdefault@tc####1{\textcolor{Command}{####1}}}
  % Optional arguments
  \expandafter\def\csname PYGdefault@tok@na\endcsname{\def\PYGdefault@tc####1{\textcolor{Option}{####1}}}
  % Braces
  \expandafter\def\csname PYGdefault@tok@nb\endcsname{\def\PYGdefault@tc####1{\textcolor{Environment}{####1}}}
}
\apptocmd{\minted@checkstyle}{\resetmintedformat}{}{}
\makeatother
\newcommand{\pkg}[1]{\href{http://www.ctan.org/pkg/#1}{\textsf{#1}}}
\MakeShortVerb{\|}
\makeatletter
\let\PrintMacroName\@gobble
\let\PrintEnvName\@gobble
\renewenvironment{tcb@manual@entry}{\begin{list}{}{%
  \setlength{\topsep}{0pt}
  \setlength{\partopsep}{0pt}
  \setlength{\leftmargin}{\kvtcb@doc@left}%
  \setlength{\itemindent}{0pt}%
  \setlength{\itemsep}{0pt}%
  \setlength{\parsep}{0pt}%
  \setlength{\rightmargin}{\kvtcb@doc@right}%
  }\item}{\end{list}}
\makeatother
% This bit inspired by ydoc
\makeatletter
\newwrite\ydocwrite
\def\ydocfname{\jobname.tcbtemp}
\def\ydoc@catcodes{%
  \let\do\@makeother
  \dospecials
  \catcode`\\=\active
  \catcode`\^^M=\active
  \catcode`\ =\active
}
\def\macrocode{%
  \begingroup
  \ydoc@catcodes
  \macro@code
}
\def\endmacrocode{}
\begingroup
\endlinechar\m@ne
\@firstofone{%
\catcode`\|=0\relax
\catcode`\(=1\relax
\catcode`\)=2\relax
\catcode`\*=14\relax
\catcode`\{=12\relax
\catcode`\}=12\relax
\catcode`\ =12\relax
\catcode`\%=12\relax
\catcode`\\=\active
\catcode`\^^M=\active
\catcode`\ =\active
}*
|gdef|macro@code#1^^M%    \end{macrocode}(*
|endgroup|expandafter|macro@@code|expandafter(|ydoc@removeline#1|noexpand|lastlinemacro)*
)*
|gdef|ydoc@removeline#1^^M(|noexpand|firstlinemacro)*
|gdef|ydoc@defspecialmacros(*
|def^^M(|noexpand|newlinemacro)*
|def (|noexpand|spacemacro)*
|def\(|noexpand|bslashmacro)*
)*
|gdef|ydoc@defrevspecialmacros(*
|def|newlinemacro(|noexpand^^M)*
|def|spacemacro(|noexpand )*
|def|bslashmacro(|noexpand\)*
)*
|endgroup
\def\macro@@code#1{%
  {\ydoc@defspecialmacros
  \xdef\themacrocode{#1}}%
  \PrintMacroCode
  \end{macrocode}%
}
\def\PrintMacroCode{%
  \begingroup
  \let\firstlinemacro\empty
  \let\lastlinemacro\empty
  \def\newlinemacro{^^J}%
  \let\bslashmacro\bslash
  \let\spacemacro\space
  \immediate\openout\ydocwrite=\ydocfname\relax
  \immediate\write\ydocwrite{\themacrocode}%
  \immediate\closeout\ydocwrite
  \let\input\@input
  \tcbinputlisting{breakable,listing only,docexample,listing file=\ydocfname}%
  \endgroup
}
\makeatother

\usepackage{tgm1}

\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}

\GetFileInfo{\jobname.dtx}
\DoNotIndex{\newcommand,\newenvironment}

\title{\textsf{tikzgamemap} --- Maps for interactive fiction with TikZ\thanks{This file
  describes version \fileversion, last revised \filedate.}
}
\author{Alex Ball\thanks{E-mail: ab318@bath.ac.uk}}
\date{Released \filedate}

\maketitle

\changes{v0.1}{2019/02/19}{First public release}

\begin{abstract}
While interactive fiction can come in many different varieties, there is a class
of works that follows the tradition established by \emph{[Colossal Cave]
Adventure} and Infocom games such as \emph{Zork}. Players typically move between
areas or rooms using the eight cardinal and primary intercardinal points of the
compass, as well as up, down, in and out. This package provides some shortcut
methods for mapping out such game spaces using the graph-drawing facilities of
TikZ.
\end{abstract}

\section{Introduction}

If you have ever played a text adventure game in the Infocom style, you will
probably recognise the following as being a fairly typical passage.

\begin{tcolorbox}[docexample,sidebyside,righthand width=0.15\linewidth]
\textbf{Woodland Clearing}

\medskip
Though the tall oaks of the wood tower above you on all sides, here the leaf
mulch gives way to scrubby grass and wild flowers, and for once you get a clear
view of the bright blue sky. Footpaths lead away through the trees to the north,
southwest and southeast.

\medskip
There is a brass lamp here.

\tcblower
\centering
\begin{gamemap}
\graph{
  "Woodland\\Clearing" [exits={n,sw,se}]
};
\end{gamemap}
\par
\end{tcolorbox}

In the language of Inform, one of the systems for writing such games, the
Woodland Clearing in this example is a \emph{room}. The player can travel to other
rooms by moving in one of twelve possible directions: north, northeast, east,
southeast, south, southwest, west, northwest, up, down, in and out. As a player,
in order to keep track of these rooms and how they connect, it is often a good
idea to record your progress in a simple map; so you might represent this room
like the picture on the right of the passage.

The aim of this package is to make it as easy and as natural as possible to
build up a map of the game world as you play, using TikZ as a graphical backend.
I do not claim to have achieved this on the first attempt, which is why I have
left myself some wiggle room in the naming of the package file. (You will see
what I mean in a moment.)

\section{Usage}

\subsection{Loading}

Eventually, this package may support multiple input styles, but at the moment
it only supports one, \texttt{tgm1}, which you load in the usual way.

\begin{dispListing}
\usepackage{tgm1}
\end{dispListing}

\subsection{Setting up}

\begin{docEnvironment}{gamemap}{\oarg{options}}
This is the outer environment that needs to surround the map. It is a wrapper
around the \env{tikzpicture} environment, so you can pass TikZ options to
it, use TikZ commands within it and use it like \env{tikzpicture} with, say,
the \pkg{standalone} class.
\end{docEnvironment}

As well as the standard ones, you can also use these options with \env{gamemap}:

\begin{docKey}{set grid}{=\marg{dimension}\marg{dimension}}{\brackets{8em}\brackets{5em}}
Sets the $x$ and $y$ dimensions of the grid used to lay out rooms, so by default
the centre of a room at (1, 1) will be 8em to the right and 5em above the origin.
It also adjusts the aspect ratio of the compass points so that, in this case,
northeast will be somewhat nearer to east than north.
\end{docKey}

\begin{docKey}{set compass points}{=\marg{number/dimension}\marg{number/dimension}}{\brackets{8em}\brackets{5em}}
Adjusts the aspect ratio of the compass points without affecting the $x$ and $y$
dimensions of the grid, which you can set independently using the normal \key{x}
and \key{y} options. Since this is all about the ratio, the values you give can
be numbers or dimensions, so long as you are consistent.
\end{docKey}

The above options set the values of the following commands, which you can use
wherever TikZ expects an angle:

\begin{multicols}{4}
\begin{docCommand}{tgmN}{}North\end{docCommand}
\begin{docCommand}{tgmNNE}{}North-northeast\end{docCommand}
\begin{docCommand}{tgmNE}{}Northeast\end{docCommand}
\begin{docCommand}{tgmENE}{}East-northeast\end{docCommand}
\begin{docCommand}{tgmE}{}East\end{docCommand}
\begin{docCommand}{tgmESE}{}East-southeast\end{docCommand}
\begin{docCommand}{tgmSE}{}Southeast\end{docCommand}
\begin{docCommand}{tgmSSE}{}South-southeast\end{docCommand}
\begin{docCommand}{tgmS}{}South\end{docCommand}
\begin{docCommand}{tgmSSW}{}South-southwest\end{docCommand}
\begin{docCommand}{tgmSW}{}Southwest\end{docCommand}
\begin{docCommand}{tgmWSW}{}West-southwest\end{docCommand}
\begin{docCommand}{tgmW}{}West\end{docCommand}
\begin{docCommand}{tgmWNW}{}West-northwest\end{docCommand}
\begin{docCommand}{tgmNW}{}Northwest\end{docCommand}
\begin{docCommand}{tgmNNW}{}North-northwest\end{docCommand}
\end{multicols}

Within the environment, you will also need this:

\begin{docCommand}{graph}{\oarg{options}\marg{routes};}
This activates the regular TikZ graph-drawing syntax parsing. Add routes through
the game world within this command. Unfortunately, none of the regular graph
drawing layouts is particularly suitable for automatically placing rooms, so
until I can find or write one, your best bet is probably to pass ‘\docValue{no
placement}’ as the option.
\end{docCommand}

\subsection{Drawing a room}

To draw a room, simply type the name within double quotes. If you want line
breaks, add them manually.

\begin{dispExample*}{sidebyside,righthand width=0.333\linewidth}
\begin{gamemap}
\graph{ "Woodland\\Clearing" };
\end{gamemap}
\end{dispExample*}

You can refer to the room again later in the same graph by giving its ID, which
is normally the same as its name. To give it a different ID, write the room
initially as \meta{ID}\slash\meta{name}, e.g.\@
\tcbox[docexample,size=small,on line]{|wc/"Woodland\\Clearing"|}.
This is useful if you have to write it several times and want to save some
typing, or if the game tries to confuse you by giving multiple rooms the same
name.

You can change the appearance of the room with the following options:

\begin{docKey}{entry}{}{no value}
Marks the room as being the starting point on the map. Visually, it gives the
room a double border.
\end{docKey}

\begin{docKey}{tunnel}{}{no value}
Marks the room as appearing on another map as well, so that you can split the
game world across several maps. Visually, it gives the room a thick border.
\end{docKey}

\begin{docKey}{exit}{=\meta{direction}}{no default, initially empty}
Marks an unexplored exit from the room. Possible values include \docValue{n},
\docValue{ne}, \docValue{e}, \docValue{se}, \docValue{s}, \docValue{sw},
\docValue{w}, and \docValue{nw}. The values \docValue{u}, \docValue{d},
\docValue{in}, \docValue{o} are special: by default they get positioned NNE,
SSW, ESE and WNW respectively, but you can specify the exact angle as a value
of the direction, as in \val{u=}\meta{angle}; if you do, the whole argument must
be wrapped in braces.
\end{docKey}

\begin{docKey}{exits}{=\marg{list of directions}}{no default, initially empty}
To give more than one exit at once, pass a comma separated list to this option,
wrapped in braces.
\end{docKey}

\begin{dispExample*}{sidebyside,righthand width=0.333\linewidth}
\begin{gamemap}
\graph{
  "Woodland\\Clearing"
    [entry,exits={n,sw,se,u=150}]
};
\end{gamemap}
\end{dispExample*}

To keep things simple, I recommend you only pass options to a room the first
time you mention it within a graph.

\subsection{Positioning rooms}

As mentioned above, the ‘\key{no placement}’ option is currently the best
one to pass to the \cs{graph} command. This means rooms get positioned at the
(0, 0) position unless you override this with the \key{x} or \key{y} room
options or (more likely) both.

If you have to lay out several rooms in a row or column,
you can wrap them in braces and give the common \key{x} or \key{y} value as an
option just inside the opening brace, like so:

\begin{dispExample*}{sidebyside,righthand width=0.333\linewidth}
\begin{gamemap}
\graph [no placement] {
  { [y=1]
  "Woodland\\Clearing" [x=1,exits={n,sw,se}],
  "Fallen\\Tree" [x=2,tunnel,exits=w]
  }
};
\end{gamemap}
\end{dispExample*}

\subsection{Connecting rooms}

The advantage of the TikZ graph syntax is that it naturally lends itself to the
kind of exploration you do in text adventures.

\begin{enumerate}
\item Write down the room you are in, marking unexplored exits.
\item When exploring an exit, remove it from the room options, and use
  ‘\texttt{--} \oarg{options}’ to mark a route. Then write down the next room.
\item If you back-track, use a comma to mark the end of the current route and
  start a new one.
\end{enumerate}

You can use regular TikZ drawing options to customize the appearance of the
route (e.g. \key{dashed}, \key{dotted}) but this package provides a few that
draw exits at either end and shape the route accordingly.

The simplest and most common case is where a route is symmetrical.

\begin{docKey}{going}{=\meta{direction}}{no default, initially empty}
The direction can be \docValue{n}, \docValue{ne}, \docValue{e}, \docValue{se},
\docValue{s}, \docValue{sw}, \docValue{w}, \docValue{nw}, \docValue{u},
\docValue{d}, \docValue{in}, or \docValue{o}. The beginning of the path will
be labelled with the given exit, and the end will be labelled with its inverse.
\end{docKey}

\begin{dispExample*}{sidebyside,righthand width=0.333\linewidth}
\begin{gamemap}
\graph [no placement] {
  "Fallen\\Tree" [x=2,y=1] -- [going=w]
  "Woodland\\Clearing" [x=1,y=1] -- [going=u]
  "Treetop" [x=1,y=2]
};
\end{gamemap}
\end{dispExample*}

If the route is asymmetrical, or you need to explicitly position the non-compass
exits, use the following option instead.

\begin{docKey}{go}{=\marg{direction}\marg{direction}}{no default, initially empty}
The directions can be \docValue{n}, \docValue{ne}, \docValue{e}, \docValue{se},
\docValue{s}, \docValue{sw}, \docValue{w}, \docValue{nw}, \docValue{u},
\docValue{d}, \docValue{in}, \docValue{o}, or \docValue{null}. The beginning of
the path will be labelled with the first given exit, and the end will be
labelled with the second. You can explicitly place the non-compass exits at a
certain angle around the room circumference by giving the angle as a value of
the direction, as in \val{u=}\meta{angle}. If you use the \val{null} direction,
no label will be drawn (indicating a one-way route), and you should definitely
specify an angle to avoid disappointment.
\end{docKey}

\begin{dispExample*}{sidebyside,righthand width=0.333\linewidth}
\begin{gamemap}
\graph [no placement] {
  "Fallen\\Tree" [x=1.5,y=0] -- [go={n}{se}]
  "Woodland\\Clearing" [x=1,y=1,exits={n,sw}]
  -- [go={u=0}{d=180}] "Treetop" [x=2,y=1]
};
\end{gamemap}
\end{dispExample*}

Sometimes a game gives up all pretence of realism and includes a set of
asymmetric routes deliberately designed to confuse you. For situations such as
these, the following option can be used.

\begin{docKey}{maze}{=\marg{direction}\marg{direction}}{no default, initially empty}
The directions can be \docValue{n}, \docValue{ne}, \docValue{e}, \docValue{se},
\docValue{s}, \docValue{sw}, \docValue{w}, \docValue{nw}, \docValue{u},
\docValue{d}, \docValue{in}, \docValue{o}, or \docValue{null}. This behaves much
like \key{go} except that the route is drawn straight between the rooms, without
any attempt to place the exits logically. Any angles given as arguments to a
direction are thus ignored. Use \val{null} to avoid drawing an exit at all.
\end{docKey}

\begin{dispExample*}{sidebyside,righthand width=0.27\linewidth}
\begin{gamemap}[set grid={8em}{6em}]
\graph [no placement] {
  a/"Twisty\\Bit" [x=0,y=2,exit=nw] -- [maze={w}{sw}]
  b/"Twisty\\Bit" [x=1,y=1.5] -- [maze={e}{n}]
  c/"Twisty\\Bit" [x=1,y=0.5] -- [maze={nw}{null}]
  d/"Twisty\\Bit" [x=0,y=1] -- [maze={sw}{null}]
  e/"Twisty\\Bit" [x=0,y=0,exit=se],
  a -- [maze={sw}{s}] c,
  a -- [maze={ne}{nw}] d,
  b -- [maze={ne}{s}] d,
  b -- [maze={nw}{w}] e,
  c -- [maze={se}{e}] e
};
\end{gamemap}
\end{dispExample*}

\subsection{Customizing how things look}

\begin{docKey}{tgmnode}{}{initially: see section~\ref{sec:room-options}}
This TikZ style is applied to all the room nodes.
\end{docKey}

\begin{docKey}{label node}{}{initially: see section~\ref{sec:exits}}
This TikZ style is applied to all the exit labels.
\end{docKey}

\begin{docKey}{exit node}{}{initially: \key{label node}}
This TikZ style is applied to exits drawn by the \refKey*{exit} option. It
just applies the \key{label node} style initially.
\end{docKey}

\begin{docKey}{transit node}{}{initially: \key{label node}}
This TikZ style is applied to exits drawn by the \refKey*{go}, \refKey*{going}
and \refKey*{maze} options. It just applies the \key{label node} style
initially.
\end{docKey}

\begin{docKey}{tgmedge}{}{initially: see section~\ref{sec:route-options}}
This TikZ style is applied to all the route edges.
\end{docKey}

You can replace the defaults or append options using \cs{tikzset} in the normal
way.

\begin{dispExample*}{sidebyside,righthand width=0.18\linewidth}
\tikzset{tgmnode/.append style = {fill=yellow!25},
       exit node/.append style = {fill=green!10,rectangle}}
\begin{gamemap}
\graph{ "Woodland\\Clearing" [exits={n,sw,se}] };
\end{gamemap}
\end{dispExample*}

\StopEventually{%
 \clearpage
 \PrintChanges
 \PrintIndex
}

\clearpage

\section{Implementation}

\setcounter{FancyVerbLine}{20}%
\DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \iffalse %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<*tgm1>
% \fi %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \subsection{Dependencies}
%
% This package is based on TikZ. The |graph| library provides the graph syntax,
% the |quotes| library allows you to use the quotes syntax to label nodes and
% edges, and |shapes.misc| provides the rounded rectangle shape.
%
%    \begin{macrocode}
\RequirePackage{etoolbox}
\RequirePackage{tikz}
\usetikzlibrary{graphs, quotes, shapes.misc, matrix, backgrounds}
%    \end{macrocode}
%
% \subsection{Setting the aspect ratio}
%
% To allow for configurability, we use macros instead of angles for compass
% point directions. The cardinal compass points are at constant angles; we could
% hard code them, but for consistency with the rest we don't.
%
% \begin{macro}{tgmE}
% \begin{macro}{tgmN}
% \begin{macro}{tgmW}
% \begin{macro}{tgmS}
% \begin{macro}{tgmEE}
%    \begin{macrocode}
\def\tgmE{0}
\def\tgmN{90}
\def\tgmW{180}
\def\tgmS{270}
\def\tgmEE{360}
%    \end{macrocode}
%
% The usefulness of \cs{tgmEE} will become clear in a moment.
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{optionkey}{set compass points}
% The remaining directions need to be set with reference to whatever aspect
% ratio is used for the grid on which the rooms are laid out. The
% \key{set compass points} key takes two arguments: the relative horizontal
% and vertical size of the grid respectively.
%
%    \begin{macrocode}
\tikzset
{ set compass points/.code n args = {2}{%
%    \end{macrocode}
%
% The angles for the primary intercardinal points are calculated from
% $\tan^{-1} (y/x)$.
%
% \begin{macro}{tgmNE}
% \begin{macro}{tgmNW}
% \begin{macro}{tgmSW}
% \begin{macro}{tgmSE}
%    \begin{macrocode}
    \pgfmathsetmacro{\tgmNE}{atan2(#2, #1)}%
    \pgfmathsetmacro{\tgmNW}{atan2(#2, -#1)}%
    \pgfmathsetmacro{\tgmSW}{add(atan2(-#2, -#1), 360)}%
    \pgfmathsetmacro{\tgmSE}{add(atan2(-#2, #1), 360)}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% We now calculate the angles for the points between the eight defined so far.
% It turns out that taking the mean of the angles either side gives a more
% aesthetically pleasing result than the strict geometric solution.
%
% \begin{macro}{tgmENE}
% \begin{macro}{tgmNNE}
% \begin{macro}{tgmNNW}
% \begin{macro}{tgmWNW}
% \begin{macro}{tgmWSW}
% \begin{macro}{tgmSSW}
% \begin{macro}{tgmSSE}
% \begin{macro}{tgmESE}
%    \begin{macrocode}
    \pgfmathsetmacro{\tgmENE}{divide(add(\tgmE,  \tgmNE), 2)}%
    \pgfmathsetmacro{\tgmNNE}{divide(add(\tgmNE, \tgmN ), 2)}%
    \pgfmathsetmacro{\tgmNNW}{divide(add(\tgmN,  \tgmNW), 2)}%
    \pgfmathsetmacro{\tgmWNW}{divide(add(\tgmNW, \tgmW ), 2)}%
    \pgfmathsetmacro{\tgmWSW}{divide(add(\tgmW,  \tgmSW), 2)}%
    \pgfmathsetmacro{\tgmSSW}{divide(add(\tgmSW, \tgmS ), 2)}%
    \pgfmathsetmacro{\tgmSSE}{divide(add(\tgmS,  \tgmSE), 2)}%
    \pgfmathsetmacro{\tgmESE}{divide(add(\tgmSE, \tgmEE), 2)}%
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{optionkey}
%
% \begin{optionkey}{set grid}
% We provide a convenience option for setting the $x$ and $y$ vectors and the
% compass points at the same time.
%
%    \begin{macrocode}
, set grid/.code n args = {2}{
    \pgfkeys{tikz,x = #1}%
    \pgfkeys{tikz,y = #2}%
    \pgfkeys{tikz,set compass points = {#1}{#2}}%
  }
%    \end{macrocode}
% \end{optionkey}
%
% \subsection{Room options}\label{sec:room-options}
%
% \begin{optionkey}{tgmnode}
% The \key{tgmnode} key is the base style used for rooms.
%
%    \begin{macrocode}
, tgmnode/.style =
  { text depth = 0.2em
  , align = center
  , draw = black!20
  , thick
  , fill = white
  , rounded rectangle
  , inner sep = 1.25ex
  }
%    \end{macrocode}
% \end{optionkey}
%
% \begin{optionkey}{entry}
% The \key{entry} key is an alias for a double border.
%
  %    \begin{macrocode}
, entry/.style =
  { double
  }
%    \end{macrocode}
% \end{optionkey}
%
% \begin{optionkey}{tunnel}
% The \key{tunnel} key is an alias for a thick border.
%
%    \begin{macrocode}
, tunnel/.style =
  { ultra thick
  }
%    \end{macrocode}
% \end{optionkey}
%
% \subsection{Exits}\label{sec:exits}
%
% \begin{optionkey}{label node}
% \begin{optionkey}{exit node}
% \begin{optionkey}{transit node}
% The \key{label node} option controls the appearance of the exits that are drawn
% on the periphery of the rooms. This base style is inherited by \key{exit node}
% and \key{transit node}, which could be amended to do different things.
%
%    \begin{macrocode}
, label node/.style =
  { font = \tiny
  , minimum size = 1em
  , circle
  , thin
  , inner sep = 0pt
  , fill = white
  , draw = black!20
  }
, exit node/.style =
  { label node
  }
, transit node/.style =
  { label node
  }
%    \end{macrocode}
% \end{optionkey}
% \end{optionkey}
% \end{optionkey}
%
% \subsubsection{Exits as labels on nodes}
%
% \begin{optionkey}{exit}
% The \key{exit} option is used to draw an exit as a label around the room node.
% Its value must be drawn from an authority list, and determines both the label
% text and the angle at which it is drawn.
%
% For the compass directions, the angle is fixed.
%
%    \begin{macrocode}
, exit/.is choice
, exit/e/.style    = {label={[exit node]\tgmE:E}}
, exit/ne/.style   = {label={[exit node]\tgmNE:\textsc{ne}}}
, exit/n/.style    = {label={[exit node]\tgmN:N}}
, exit/nw/.style   = {label={[exit node]\tgmNW:\textsc{nw}}}
, exit/w/.style    = {label={[exit node]\tgmW:W}}
, exit/sw/.style   = {label={[exit node]\tgmSW:\textsc{sw}}}
, exit/s/.style    = {label={[exit node]\tgmS:S}}
, exit/se/.style   = {label={[exit node]\tgmSE:\textsc{se}}}
%    \end{macrocode}
%
% For the non-compass directions, the angle has a default that can be overridden
% by an argument value.
%
%    \begin{macrocode}
, exit/u/.style    = {label={[exit node]#1:U}}
, exit/u/.default  = {\tgmNNE}
, exit/d/.style    = {label={[exit node]#1:D}}
, exit/d/.default  = {\tgmSSW}
, exit/in/.style   = {label={[exit node]#1:in}}
, exit/in/.default = {\tgmESE}
, exit/o/.style    = {label={[exit node]#1:O}}
, exit/o/.default  = {\tgmWNW}
%    \end{macrocode}
% \end{optionkey}
%
% \begin{optionkey}{exits}
% We supply the \key{exits} key to allow more than one exit to be specified at
% once.
%
%    \begin{macrocode}
, exits/.style     = { exit/.list={#1} }
%    \end{macrocode}
% \end{optionkey}
%
% \subsubsection{Exits as nodes on edges}
%
% \begin{optionkey}{labelin}
% The \key{labelin} option draws an exit as a node at the very end of an edge.
% Its value must be drawn from an authority list, and determines both the label
% text and the angle at which it is drawn. The \val{null} value does nothing.
%
%    \begin{macrocode}
, labelin/.is choice
, labelin/e/.style   = { edge node={node [transit node, pos=1] {E}} }
, labelin/ne/.style  = { edge node={node [transit node, pos=1] {\textsc{ne}}} }
, labelin/n/.style   = { edge node={node [transit node, pos=1] {N}} }
, labelin/nw/.style  = { edge node={node [transit node, pos=1] {\textsc{nw}}} }
, labelin/w/.style   = { edge node={node [transit node, pos=1] {W}} }
, labelin/sw/.style  = { edge node={node [transit node, pos=1] {\textsc{sw}}} }
, labelin/s/.style   = { edge node={node [transit node, pos=1] {S}} }
, labelin/se/.style  = { edge node={node [transit node, pos=1] {\textsc{se}}} }
, labelin/u/.style   = { edge node={node [transit node, pos=1] {U}} }
, labelin/d/.style   = { edge node={node [transit node, pos=1] {D}} }
, labelin/in/.style  = { edge node={node [transit node, pos=1] {in}} }
, labelin/o/.style   = { edge node={node [transit node, pos=1] {O}} }
, labelin/null/.style = {}
%    \end{macrocode}
% \end{optionkey}
%
% \begin{optionkey}{labelout}
% The \key{labelout} option does the same thing but at the very beginning of
% the edge.
%
%    \begin{macrocode}
, labelout/.is choice
, labelout/e/.style  = { edge node={node [transit node, pos=0] {E}} }
, labelout/ne/.style = { edge node={node [transit node, pos=0] {\textsc{ne}}} }
, labelout/n/.style  = { edge node={node [transit node, pos=0] {N}} }
, labelout/nw/.style = { edge node={node [transit node, pos=0] {\textsc{nw}}} }
, labelout/w/.style  = { edge node={node [transit node, pos=0] {W}} }
, labelout/sw/.style = { edge node={node [transit node, pos=0] {\textsc{sw}}} }
, labelout/s/.style  = { edge node={node [transit node, pos=0] {S}} }
, labelout/se/.style = { edge node={node [transit node, pos=0] {\textsc{se}}} }
, labelout/u/.style  = { edge node={node [transit node, pos=0] {U}} }
, labelout/d/.style  = { edge node={node [transit node, pos=0] {D}} }
, labelout/in/.style = { edge node={node [transit node, pos=0] {in}} }
, labelout/o/.style  = { edge node={node [transit node, pos=0] {O}} }
, labelout/null/.style = {}
%    \end{macrocode}
% \end{optionkey}
%
% \subsection{Shaping ‘to’ edges}
%
% The following options trigger the use of the ‘to’ path instead of a ‘line-to’
% path, and ensure the edge leaves and enters the nodes at the correct angles.
%
% \begin{optionkey}{startedge}
% The \key{startedge} option takes one of an authority list of values, passes it
% to \key{labelout} option, and passes an appropriate angle to the standard
% \key{out} option.
%
%    \begin{macrocode}
, startedge/.is choice
, startedge/e/.style =
  { out = \tgmE
  , labelout = e
  }
, startedge/ne/.style =
  { out = \tgmNE
  , labelout = ne
  }
, startedge/n/.style =
  { out = \tgmN
  , labelout = n
  }
, startedge/nw/.style =
  { out = \tgmNW
  , labelout = nw
  }
, startedge/w/.style =
  { out = \tgmW
  , labelout = w
  }
, startedge/sw/.style =
  { out = \tgmSW
  , labelout = sw
  }
, startedge/s/.style =
  { out = \tgmS
  , labelout = s
  }
, startedge/se/.style =
  { out = \tgmSE
  , labelout = se
  }
%    \end{macrocode}
%
% The angles of the remaining directions can be configured.
%
%    \begin{macrocode}
, startedge/u/.style =
  { out = #1
  , labelout = u
  }
, startedge/u/.default  = {\tgmNNE}
, startedge/d/.style =
  { out = #1
  , labelout = d
  }
, startedge/d/.default = {\tgmSSW}
, startedge/in/.style =
  { out = #1
  , labelout = in
  }
, startedge/in/.default  = {\tgmESE}
, startedge/o/.style =
  { out = #1
  , labelout = o
  }
, startedge/o/.default  = {\tgmWNW}
%    \end{macrocode}
%
% The default value is \val{null}, which prints no label but can establish a
% direction.
%
%    \begin{macrocode}
, startedge/.default = null
, startedge/null/.code = {%
    \pgfkeys{tikz, labelout/null}%
    \ifblank{#1}{}{%
      \pgfkeys{tikz, out = {#1}}%
    }%
  }
, startedge/null/.default  = {}
%    \end{macrocode}
% \end{optionkey}
%
% \begin{optionkey}{startedge}
% The \key{endedge} option takes one of an authority list of values, passes it
% to \key{labelin} option, and passes an appropriate angle to the standard
% \key{in} option.
%
%    \begin{macrocode}
, endedge/.is choice
, endedge/e/.style =
  { in = \tgmE
  , labelin = e
  }
, endedge/ne/.style =
  { in = \tgmNE
  , labelin = ne
  }
, endedge/n/.style =
  { in = \tgmN
  , labelin = n
  }
, endedge/nw/.style =
  { in = \tgmNW
  , labelin = nw
  }
, endedge/w/.style =
  { in = \tgmW
  , labelin = w
  }
, endedge/sw/.style =
  { in = \tgmSW
  , labelin = sw
  }
, endedge/s/.style =
  { in = \tgmS
  , labelin = s
  }
, endedge/se/.style =
  { in = \tgmSE
  , labelin = se
  }
%    \end{macrocode}
%
% As before, the angles of the remaining directions can be configured.
%
%    \begin{macrocode}
, endedge/u/.style =
  { in = #1
  , labelin = u
  }
, endedge/u/.default  = {\tgmNNE}
, endedge/d/.style =
  { in = #1
  , labelin = d
  }
, endedge/d/.default = {\tgmSSW}
, endedge/in/.style =
  { in = #1
  , labelin = in
  }
, endedge/in/.default  = {\tgmESE}
, endedge/o/.style =
  { in = #1
  , labelin = o
  }
, endedge/o/.default  = {\tgmWNW}
%    \end{macrocode}
%
% The default value is \val{null}, which prints no label but can establish a
% direction.
%
%    \begin{macrocode}
, endedge/.default = null
, endedge/null/.code = {%
    \pgfkeys{tikz, labelin/null}%
    \ifblank{#1}{}{%
      \pgfkeys{tikz, in = {#1}}%
    }%
  }
, endedge/null/.default  = {}
%    \end{macrocode}
% \end{optionkey}
%
% \subsection{Route options}\label{sec:route-options}
%
% \begin{optionkey}{tgmedge}
% The \key{tgmedge} option styles the edges representing the routes. We make
% them black with a white border, so if they cross it appears that the first
% route passes under the second.
%
%    \begin{macrocode}
, tgmedge/.style =
  { draw = white
  , double = black
  }
%    \end{macrocode}
% \end{optionkey}
%
% \begin{optionkey}{go}
% The \key{go} option sets the \key{tgmedge} style and passes its two arguments
% to \key{startedge} and \key{endedge} respectively.
%
%    \begin{macrocode}
, go/.style n args = {2}{tgmedge, startedge = {#1}, endedge = {#2}}
%    \end{macrocode}
% \end{optionkey}
%
% \begin{optionkey}{maze}
% The \key{maze} option sets the \key{tgmedge} style and passes its two arguments
% to \key{labelout} and \key{labelin} respectively. It therefore only draws the
% exits, and does not trigger use of a ‘to’ path.
%
%    \begin{macrocode}
, maze/.style n args = {2}{tgmedge, labelout = {#1}, labelin = {#2}}
%    \end{macrocode}
% \end{optionkey}
%
% \begin{optionkey}{going}
% The \key{going} key sets the \key{tgmedge} style, passes its argument to
% \key{startedge}, and passes the reciprocal of its argument to \key{endedge}.
%
%    \begin{macrocode}
, going/.code = {%
    \pgfkeys{tikz, tgmedge, startedge/#1}%
    \ifstrequal{#1}{e}{%
      \pgfkeys{tikz,endedge = w}%
    }{%
    \ifstrequal{#1}{ne}{%
      \pgfkeys{tikz,endedge = sw}%
    }{%
    \ifstrequal{#1}{n}{%
      \pgfkeys{tikz,endedge = s}%
    }{%
    \ifstrequal{#1}{nw}{%
      \pgfkeys{tikz,endedge = se}%
    }{%
    \ifstrequal{#1}{w}{%
      \pgfkeys{tikz,endedge = e}%
    }{%
    \ifstrequal{#1}{sw}{%
      \pgfkeys{tikz,endedge = ne}%
    }{%
    \ifstrequal{#1}{s}{%
      \pgfkeys{tikz,endedge = n}%
    }{%
    \ifstrequal{#1}{se}{%
      \pgfkeys{tikz,endedge = nw}%
    }{%
    \ifstrequal{#1}{u}{%
      \pgfkeys{tikz,endedge = d}%
    }{%
    \ifstrequal{#1}{d}{%
      \pgfkeys{tikz,endedge = u}%
    }{%
    \ifstrequal{#1}{in}{%
      \pgfkeys{tikz,endedge = o}%
    }{%
    \ifstrequal{#1}{o}{%
      \pgfkeys{tikz,endedge = in}%
    }{}}}}}}}}}}}}%
  }
}
%    \end{macrocode}
% \end{optionkey}
%
% \subsection{Wrapper environments}
%
% \begin{environment}{gamemap}
% The \env{gamemap} environment is simply a \env{tikzpicture} environment with
% a different set of default styles. Among other things, the \key{tgmnode}
% style is applied to all nodes within graphs. The leading for multiline text
% is reduced with \cs{linespread}.
%
%    \begin{macrocode}
\newenvironment{gamemap}[1][]{%
\begin{tikzpicture}
[ set grid = {8em}{5em}
, graphs/every graph/.style =
  { nodes = tgmnode
  , /tikz/label distance = -0.5em - 0.2pt
  }
, every edge quotes/.append style = {font = \scriptsize}
, #1
]
\linespread{0.9}
}{%
\end{tikzpicture}%
}
%    \end{macrocode}
% \end{environment}
%
% \iffalse %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%</tgm1>
% \fi %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\Finale
